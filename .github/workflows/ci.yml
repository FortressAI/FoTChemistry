name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.9"

jobs:
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy
        pip install -e ".[dev]"
        
    - name: Black code formatting
      run: black --check --diff .
      
    - name: Flake8 linting
      run: flake8 .
      
    - name: MyPy type checking
      run: mypy fot/ --ignore-missing-imports

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-xdist
        pip install -e ".[dev]"
        
    - name: Run tests
      run: |
        pytest tests/ -v --cov=fot --cov-report=xml --cov-report=term
        
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  ontology-validation:
    name: Ontology Validation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install ontology tools
      run: |
        python -m pip install --upgrade pip
        pip install owlready2 rdflib sparqlwrapper
        
    - name: Validate OWL ontology
      run: |
        python -c "
        from owlready2 import get_ontology
        onto = get_ontology('ontology/fot_chemistry.owl').load()
        print(f'Loaded ontology with {len(list(onto.classes()))} classes')
        print(f'Loaded ontology with {len(list(onto.object_properties()))} object properties')
        print('âœ“ Ontology validation passed')
        "
        
    - name: Validate JSON-LD context
      run: |
        python -c "
        import json
        with open('ontology/fot_chemistry_context.jsonld') as f:
            context = json.load(f)
        assert '@context' in context
        print('âœ“ JSON-LD context validation passed')
        "

  sparql-queries:
    name: SPARQL Query Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install rdflib sparqlwrapper owlready2
        
    - name: Test SPARQL queries
      run: |
        # Test that SPARQL queries in akg/sparql/ are syntactically valid
        find akg/sparql/ -name "*.rq" -exec echo "Testing {}" \; -exec python -c "
        import sys
        from rdflib.plugins.sparql import prepareQuery
        with open('{}') as f:
            query = f.read()
        try:
            prepareQuery(query)
            print('âœ“ SPARQL query {} is valid')
        except Exception as e:
            print(f'âœ— SPARQL query {} failed: {e}')
            sys.exit(1)
        " \;

  chemistry-tests:
    name: Chemistry Integration Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install chemistry dependencies
      run: |
        python -m pip install --upgrade pip
        # Install basic chemistry packages (RDKit via conda in real workflow)
        pip install pytest
        pip install -e ".[dev]"
        
    - name: Test molecular validation
      run: |
        python -c "
        # Basic chemistry tests without RDKit dependency
        print('Testing molecular format validation...')
        # Add basic SMILES validation tests
        test_smiles = ['CCO', 'c1ccccc1', 'CC(=O)O']
        for smi in test_smiles:
            assert len(smi) > 0
            assert 'C' in smi  # Basic carbon presence check
        print('âœ“ Basic molecular validation passed')
        "

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        
    - name: Safety check for known vulnerabilities
      run: safety check --json || true
      
    - name: Bandit security scan
      run: bandit -r fot/ -f json || true

  docs:
    name: Documentation Build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install docs dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[docs]"
        
    - name: Build documentation
      run: |
        # Add docs build commands when docs/ structure is implemented
        echo "ðŸ“š Documentation build placeholder"
        echo "âœ“ Documentation build passed"
